# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fluigi_cloud.models.base_model_ import Model
from fluigi_cloud import util


class FilePropertiesUpdateInput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, file_id: str=None, file_name: str=None):  # noqa: E501
        """FilePropertiesUpdateInput - a model defined in Swagger

        :param file_id: The file_id of this FilePropertiesUpdateInput.  # noqa: E501
        :type file_id: str
        :param file_name: The file_name of this FilePropertiesUpdateInput.  # noqa: E501
        :type file_name: str
        """
        self.swagger_types = {
            'file_id': str,
            'file_name': str
        }

        self.attribute_map = {
            'file_id': 'file_id',
            'file_name': 'file_name'
        }
        self._file_id = file_id
        self._file_name = file_name

    @classmethod
    def from_dict(cls, dikt) -> 'FilePropertiesUpdateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FilePropertiesUpdateInput of this FilePropertiesUpdateInput.  # noqa: E501
        :rtype: FilePropertiesUpdateInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_id(self) -> str:
        """Gets the file_id of this FilePropertiesUpdateInput.


        :return: The file_id of this FilePropertiesUpdateInput.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id: str):
        """Sets the file_id of this FilePropertiesUpdateInput.


        :param file_id: The file_id of this FilePropertiesUpdateInput.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def file_name(self) -> str:
        """Gets the file_name of this FilePropertiesUpdateInput.


        :return: The file_name of this FilePropertiesUpdateInput.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name: str):
        """Sets the file_name of this FilePropertiesUpdateInput.


        :param file_name: The file_name of this FilePropertiesUpdateInput.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api import util


class JobResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, job_id: str=None, created_at: str=None, updated_at: str=None, status: str=None, files: List[str]=None):  # noqa: E501
        """JobResponse - a model defined in Swagger

        :param job_id: The job_id of this JobResponse.  # noqa: E501
        :type job_id: str
        :param created_at: The created_at of this JobResponse.  # noqa: E501
        :type created_at: str
        :param updated_at: The updated_at of this JobResponse.  # noqa: E501
        :type updated_at: str
        :param status: The status of this JobResponse.  # noqa: E501
        :type status: str
        :param files: The files of this JobResponse.  # noqa: E501
        :type files: List[str]
        """
        self.swagger_types = {
            'job_id': str,
            'created_at': str,
            'updated_at': str,
            'status': str,
            'files': List[str]
        }

        self.attribute_map = {
            'job_id': 'job_id',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'status': 'status',
            'files': 'files'
        }
        self._job_id = job_id
        self._created_at = created_at
        self._updated_at = updated_at
        self._status = status
        self._files = files

    @classmethod
    def from_dict(cls, dikt) -> 'JobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobResponse of this JobResponse.  # noqa: E501
        :rtype: JobResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self) -> str:
        """Gets the job_id of this JobResponse.


        :return: The job_id of this JobResponse.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: str):
        """Sets the job_id of this JobResponse.


        :param job_id: The job_id of this JobResponse.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def created_at(self) -> str:
        """Gets the created_at of this JobResponse.


        :return: The created_at of this JobResponse.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this JobResponse.


        :param created_at: The created_at of this JobResponse.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this JobResponse.


        :return: The updated_at of this JobResponse.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this JobResponse.


        :param updated_at: The updated_at of this JobResponse.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def status(self) -> str:
        """Gets the status of this JobResponse.


        :return: The status of this JobResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this JobResponse.


        :param status: The status of this JobResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def files(self) -> List[str]:
        """Gets the files of this JobResponse.


        :return: The files of this JobResponse.
        :rtype: List[str]
        """
        return self._files

    @files.setter
    def files(self, files: List[str]):
        """Sets the files of this JobResponse.


        :param files: The files of this JobResponse.
        :type files: List[str]
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

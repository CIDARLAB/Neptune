# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fluigi_cloud.models.base_model_ import Model
from fluigi_cloud import util


class UpdatePasswordInput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: str=None, old_password: str=None, new_password: str=None):  # noqa: E501
        """UpdatePasswordInput - a model defined in Swagger

        :param user_id: The user_id of this UpdatePasswordInput.  # noqa: E501
        :type user_id: str
        :param old_password: The old_password of this UpdatePasswordInput.  # noqa: E501
        :type old_password: str
        :param new_password: The new_password of this UpdatePasswordInput.  # noqa: E501
        :type new_password: str
        """
        self.swagger_types = {
            'user_id': str,
            'old_password': str,
            'new_password': str
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'old_password': 'old_password',
            'new_password': 'new_password'
        }
        self._user_id = user_id
        self._old_password = old_password
        self._new_password = new_password

    @classmethod
    def from_dict(cls, dikt) -> 'UpdatePasswordInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdatePasswordInput of this UpdatePasswordInput.  # noqa: E501
        :rtype: UpdatePasswordInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this UpdatePasswordInput.


        :return: The user_id of this UpdatePasswordInput.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this UpdatePasswordInput.


        :param user_id: The user_id of this UpdatePasswordInput.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def old_password(self) -> str:
        """Gets the old_password of this UpdatePasswordInput.


        :return: The old_password of this UpdatePasswordInput.
        :rtype: str
        """
        return self._old_password

    @old_password.setter
    def old_password(self, old_password: str):
        """Sets the old_password of this UpdatePasswordInput.


        :param old_password: The old_password of this UpdatePasswordInput.
        :type old_password: str
        """
        if old_password is None:
            raise ValueError("Invalid value for `old_password`, must not be `None`")  # noqa: E501

        self._old_password = old_password

    @property
    def new_password(self) -> str:
        """Gets the new_password of this UpdatePasswordInput.


        :return: The new_password of this UpdatePasswordInput.
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password: str):
        """Sets the new_password of this UpdatePasswordInput.


        :param new_password: The new_password of this UpdatePasswordInput.
        :type new_password: str
        """
        if new_password is None:
            raise ValueError("Invalid value for `new_password`, must not be `None`")  # noqa: E501

        self._new_password = new_password

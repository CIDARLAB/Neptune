# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fluigi_cloud.models.base_model_ import Model
from fluigi_cloud import util


class CompilerInputs(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, source_files: List[str]=None, config_file: str=None, args: List[str]=None):  # noqa: E501
        """CompilerInputs - a model defined in Swagger

        :param source_files: The source_files of this CompilerInputs.  # noqa: E501
        :type source_files: List[str]
        :param config_file: The config_file of this CompilerInputs.  # noqa: E501
        :type config_file: str
        :param args: The args of this CompilerInputs.  # noqa: E501
        :type args: List[str]
        """
        self.swagger_types = {
            'source_files': List[str],
            'config_file': str,
            'args': List[str]
        }

        self.attribute_map = {
            'source_files': 'source_files',
            'config_file': 'config_file',
            'args': 'args'
        }
        self._source_files = source_files
        self._config_file = config_file
        self._args = args

    @classmethod
    def from_dict(cls, dikt) -> 'CompilerInputs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CompilerInputs of this CompilerInputs.  # noqa: E501
        :rtype: CompilerInputs
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_files(self) -> List[str]:
        """Gets the source_files of this CompilerInputs.


        :return: The source_files of this CompilerInputs.
        :rtype: List[str]
        """
        return self._source_files

    @source_files.setter
    def source_files(self, source_files: List[str]):
        """Sets the source_files of this CompilerInputs.


        :param source_files: The source_files of this CompilerInputs.
        :type source_files: List[str]
        """

        self._source_files = source_files

    @property
    def config_file(self) -> str:
        """Gets the config_file of this CompilerInputs.


        :return: The config_file of this CompilerInputs.
        :rtype: str
        """
        return self._config_file

    @config_file.setter
    def config_file(self, config_file: str):
        """Sets the config_file of this CompilerInputs.


        :param config_file: The config_file of this CompilerInputs.
        :type config_file: str
        """

        self._config_file = config_file

    @property
    def args(self) -> List[str]:
        """Gets the args of this CompilerInputs.


        :return: The args of this CompilerInputs.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args: List[str]):
        """Sets the args of this CompilerInputs.


        :param args: The args of this CompilerInputs.
        :type args: List[str]
        """

        self._args = args
